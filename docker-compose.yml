# docker-compose.yml — Compose 방식(비-Swarm)으로 다중 auth-server 인스턴스 정의
version: "3.7"

services:
  nginx:
    image: nginx:alpine
    container_name: nginx-auth
    ports:
      - "9010:80"
    command: [
      "sh", "-c",
      "printf 'upstream auth_upstream {\n    server auth-server-1:8080;\n    server auth-server-2:8080;\n    server auth-server-3:8080;\n}\n\nserver {\n    listen 80;\n    location / {\n        proxy_pass http://auth_upstream;\n        proxy_set_header Host $$host;\n        proxy_set_header X-Real-IP $$remote_addr;\n        proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $$scheme;\n    }\n}\n' > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
    ]
    depends_on:
      - auth-server-1
      - auth-server-2
      - auth-server-3
    networks:
      - auth-network



  # auth-server 인스턴스들을 개별 서비스로 정의 (Compose는 deploy.replicas를 적용하지 않으므로 이렇게 복수 서비스로 표현)
  auth-server-1:
    image: ddingsh9/auth-server:1.4
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env.prod
    container_name: auth-server-1
    networks:
      - auth-network
      - infra-network


    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 15s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  auth-server-2:
    image: ddingsh9/auth-server:1.4
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env.prod
    container_name: auth-server-2
    networks:
      - auth-network
      - infra-network


    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 15s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  auth-server-3:
    image: ddingsh9/auth-server:1.4
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env.prod
    container_name: auth-server-3
    networks:
      - auth-network
      - infra-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"


    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 15s
      timeout: 5s
      retries: 3

  log-cleaner:
    image: alpine:3.19
    container_name: log-cleaner
    command: >
      sh -c "while true; do
        find /host/nginx/logs -type f -name '*.log' -mtime +1 -delete || true;
        find /host/logs -type f -name '*.log' -mtime +1 -delete || true;
        sleep 3600;
      done"
networks:
  auth-network:
    driver: bridge
    name: auth-network
  infra-network:
    external: true
    name: infra-network

